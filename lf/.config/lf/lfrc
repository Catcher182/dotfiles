set ratios 1:2:3
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

set sixel true

# Automatic refresh
set period 1
# File and directory size
# set info size
# set dircounts




# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f
# map O $mimeopen --ask $f

cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client
map <c-o> push :open-with-gui<space> ## input application
map <a-o> push :open-with-cli<space> ## input application



# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    # case $(file --mime-type -Lb $f) in
    #     text/*) lf -remote "send $id \$$EDITOR \$fx";;
    #     *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    # esac
    case $(xdg-mime query filetype $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}



# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete %{{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete
map dD delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# 个人设置
set icons

# A couple of useful Git commands that can be run directly from LF if you're in a git project.
cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}
map gib :git_branch
map gip ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gis ${{clear; git status; echo "press ENTER"; read ENTER}}
map gil ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
map glg $lazygit

# An example on-cd command to show some git related information
cmd on-cd &{{
  zoxide add "$PWD"
	# display repository status in your prompt
	if [ -d .git ] || [ -f .git ]; then
		branch=$(git branch --show-current 2>/dev/null) || true
		remote=$(git config --get branch.$branch.remote 2>/dev/null) || true
		url=$(git remote get-url $remote 2>/dev/null) || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [GIT BRANCH:> $branch >> $url]\033[0m"
	elif [ -d .hg ]; then
		hg=$(hg branch 2>/dev/null) || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
	elif [ -d .svn ]; then
		svn=$(svn info 2>/dev/null | awk '/^URL: /{print $2}') || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
	else
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
	fi
	lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd fzfn ${{
    fzname=$(fzf --preview="/home/dawn/.config/zsh/ctpv-no-img.sh {}")
    if [ ! $fzname ]; then
        exit 0
    else
        nvim $fzname
    fi
}}


# You can bind keys in lf to your usual fzf commands
map F fzfn

# If you want to jump to a file or directory in lf using fuzzy matching, you can utilize fzf for this purpose
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' --preview="/home/dawn/.config/zsh/ctpv-no-img.sh {}"| sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump
map f :fzf_jump

# Combining fzf with ripgrep, you can interactively search in the contents of files under the current directory and select a file from the results
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
                --bind="ctrl-t:top" \
                --bind="ctrl-e:down"\
                --bind="ctrl-u:up" \
                --bind="tab:down" \
                --bind="shift-tab:up" \
                --ansi --layout=reverse --header 'Search in files' \
                | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map <a-f> :fzf_search



# Movement
map gD cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config
# map gr cd ~/repos
map gv cd ~/Videos
map gs cd ~/Study
map gS cd ~/Desktop/sx
map gP cd ~/MyProjects
map gh cd ~


cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link


# Custom Functions
cmd mkfile %{{
  printf "File Name: "
  read ans
  touch $ans
}}

cmd mkfileordir %{{
  printf " Name: "
  read ans
  if [ -z $ans ]; then
    echo "Please enter name"
  elif [ "${ans: -1}" = "/" ]; then
    mkdir -p $ans
  else
    touch $ans || mkdir -p ${ans%/*} && touch $ans
  fi
}}

map a mkfileordir
# map af mkfile
# map ad push %mkdir<space>

map V push $nvim<space>

# dragon cmd
cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx
cmd cpdragon ${{
    files=$(dragon-drop -t -x)
    for file in $files
        do
        path=${file#file://}
        name=$(basename "$path")
        cp "$path" "$(pwd)/$name"
    done
}}

cmd mvdragon ${{
    files=$(dragon-drop -t -x)
    for file in $files
        do
        path=${file#file://}
        name=$(basename "$path")
        mv "$path" "$(pwd)/$name"
    done
}}
# download file 
cmd dlfile ${{
    url=$(dragon-drop -t -x)

    if [ -n "$url" ]; then
        printf "File Name: "
        name=""
        while [ -z $name ] || [ -e $name ]
        do
            read -r name
            if [ -e "$name" ]; then
            printf "File already exists, overwrite (y|n): "
            read -r ans

            if [ "$ans" = "y" ]; then
                break
            else
                printf "File Name: "
            fi
            fi
        done

        # Download the file with curl
        [ -n "$name" ] && curl -o "$name" "$url" || exit 1
        else
        exit 1
    fi
}}

# Dragon mapping
map d
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

map dd cut





# charge U disk
cmd diskmount ${{
    # Get the target volume
    target_vol=$(lsblk | fzf --reverse | sed 's/^[^[:alnum:]]*//' | cut -d' ' -f1)
    # Is it encrypted or something?
    if [[ $(lsblk -o NAME,FSTYPE | sed 's/^[^[:alnum:]]*//' | grep "$target_vol" | awk '{print $2}') == "crypto_LUKS" ]]; then
        echo "Volume is encrypted"
        udisksctl unlock -b /dev/"$target_vol"
        list_mount
        exit 0
    fi
    # Is it internal?
    if [[ $(lsblk -o NAME,RM | sed 's/^[^[:alnum:]]*//' | grep "$target_vol " | awk '{print $2}') -eq 1 ]]; then
        removable=true
    else
        removable=false
    fi
    # Adjust to proper device path
    if [[ -e /dev/"$target_vol" ]]; then
        target_vol="/dev/$target_vol"
    elif [[ -e /dev/mapper/"$target_vol" ]]; then
        target_vol="/dev/mapper/$target_vol"
    else
        echo "Something vent wrong, no such volume?"
    fi
    if $removable; then
        udisksctl mount -b "$target_vol"
        echo "Press Return to continue"
        read 
    else
        echo "Input mountpoint:"

        read mountpoint
        
        while ! [[ -d "$mountpoint" ]]; do
            sudo mkdir -p "$mountpoint" ||\
            echo "$mountpoint is not a possible mountpoint.
    Input new mountpoint:" && read mountpoint
        done
        sudo mount "$target_vol" "$mountpoint" && \
        echo "Mounted $target_vol to $mountpoint
    Press Return to continue"
    read
    fi
}}

map U :diskmount

cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}

cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd $result"
}}

# zoxide
map zz z

map zi zi


# 批量重命名多个文件
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map R bulk-rename


# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link


# Yank paths into your clipboard
cmd yank-dirname &{{
  if [ $XDG_SESSION_TYPE = "wayland" ]; then
    dirname -- "$f" | head -c-1 | wl-copy
  else
    dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
  fi
}}
cmd yank-path &{{
  if [ $XDG_SESSION_TYPE = "wayland" ]; then
    printf '%s' "$fx" | wl-copy
  else
    printf '%s' "$fx" | xclip -i -selection clipboard
  fi
}}
cmd yank-basename &{{
  if [ $XDG_SESSION_TYPE = "wayland" ]; then
    basename -a -- $fx | head -c-1 | wl-copy
  else
    basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
  fi
}}

cmd yank-basename-without-extension &{{
  if [ $XDG_SESSION_TYPE = "wayland" ]; then
      echo "$fx" |
        xargs -r -d '\n' basename -a |
        awk -e '{
          for (i=length($0); i > 0; i--) {
            if (substr($0, i, 1) == ".") {
              if (i == 1) print $0
              else print substr($0, 0, i-1)

              break
            }
          }

          if (i == 0)
            print $0
        }' |
        if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
        wl-copy
  else
      echo "$fx" |
        xargs -r -d '\n' basename -a |
        awk -e '{
          for (i=length($0); i > 0; i--) {
            if (substr($0, i, 1) == ".") {
              if (i == 1) print $0
              else print substr($0, 0, i-1)

              break
            }
          }

          if (i == 0)
            print $0
        }' |
        if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
        xclip -i -selection clipboard
  fi
}}

map y
map yy copy
map yd yank-dirname
map yp yank-path
map yn yank-basename
map yb yank-basename-without-extension


cmd splitwindow &{{
    if [ $(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))") = "wezterm-gui" ]; then
        wezterm cli split-pane --right --cwd `dirname -- "$f" | head -c-1`
    elif [ $(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))") = "konsole" ]; then
        konsole --workdir `dirname -- "$f" | head -c-1` -e lf &
    elif [ $(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))") = "kitty" ]; then
        kitty --directory `dirname -- "$f" | head -c-1` -e lf &
    else
        tmux split -h lf; lf &
    fi
}}
map <f-3> splitwindow


# Select all files or directories in the current directory
cmd select-files %{{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
        if [ "$lf_hidden" = "false" ]; then
          # remove any hidden files so you only select files you can see.
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd select-dirs %{{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
        if [ "$lf_hidden" = "false" ]; then
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

map sd select-dirs
map sf select-files


cmd q quit

cmd set-wallpaper %{{
    ~/.config/rofi/scripts/set-wallpaper.sh $(printf '%s' "$fx")
}}

# cmd paste $cp-p --lf-paste $id

map A :rename; cmd-end
map c :rename; cmd-delete-home
map C :rename; cmd-end; cmd-delete-home

map . :read; cmd-history-prev; cmd-enter


cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

map <c-a> select-files
map <a-a> select-dirs


# ${{
#     w=$(tput cols)
#     if [ $w -le 80 ]; then
#         lf -remote "send $id set ratios 1:2"
#     else
#         lf -remote "send $id set ratios 1:2:3"
#     fi
# }}


cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false;"
    else
        lf -remote "send $id :set preview true;"
    fi
}}
map zp toggle_preview


cmd paste-progress &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd chmodf ${{
    chmod $1 $fx
}}

map p
map pn paste
map pp paste-progress




cmd kdeconnect-sendfile ${{
  kdeconnect-cli -n "$(kdeconnect-cli -a --name-only | fzf)" --share $fx
}}
map pf :kdeconnect-sendfile


cmd VIDEOtoMOV ${{
  file=$fx
  ffmpeg -hwaccel cuda -i $fx -vcodec mpeg4 -q:v 2 -acodec pcm_s16be -q:a 0 -f mov "${file%.*}.mov"
}}
cmd MOVtoMP4 ${{
  file=$fx
  ffmpeg -i $fx -c:v h264_nvenc -b:v 10M "${file%.*}.mp4"
}}
cmd CompVideo4M ${{
  file=$fx 
  ffmpeg -i $fx -c:a copy -c:v h264_nvenc -b:v 4M "${file%.*}-压缩后.${file##*.}"
}}
cmd LeftRotate90Degree ${{
  file=$fx
  ffmpeg -i $fx -map_metadata 0 -metadata:s:v rotate="90" -codec copy -c:a aac "${file%.*}-左转90°.${file##*.}"
}}
cmd RightRotate90Degree ${{
  file=$fx
  ffmpeg -i $fx -map_metadata 0 -metadata:s:v rotate="-90" -codec copy -c:a aac "${file%.*}-右转90°.${file##*.}"
}}



cmd new_permission &{{
  for file in $fx; do
    chmod "$1" "$file"
  done
  lf -remote "send $id reload"
}}

map b push :new_permission<space>


map t
map T tag-toggle
cmd tab-search ${{
    res="$(cat ~/.local/share/lf/tabs | fzf --reverse --header='Jump to location' --exact --preview 'tree -L 2 {}' || true)"
    lf -remote "send $id cd \"$res\""
}}

cmd on-quit :{{
    $cat /dev/null > ~/.local/share/lf/tabs
}}
cmd tab-sava &{{
    echo "$PWD" >> ~/.local/share/lf/tabs
}}

map ts tab-search
map tt tab-sava
map <a-1> &lf -remote "send $id cd \"$(cat ~/.local/share/lf/tabs | sed -n '1,1p')\""
map <a-2> &lf -remote "send $id cd \"$(cat ~/.local/share/lf/tabs | sed -n '2,2p')\""
map <a-3> &lf -remote "send $id cd \"$(cat ~/.local/share/lf/tabs | sed -n '3,3p')\""

